// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @map("user_name")
  password  String
  email     String   @unique
  fullName  String?  @map("full_name")
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  followers Follow[] @relation("follower")
  following Follow[] @relation("following")
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  status    String   @default("draft")
  category  String?
  authorId  String   @map("author_id")
  author    User     @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  postId    String    @map("post_id")
  post      Post      @relation(fields: [postId], references: [id])
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id])
  parentId  String?   @map("parent_id")
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentToComment")
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  postId    String?  @map("post_id")
  post      Post?    @relation(fields: [postId], references: [id])
  commentId String?  @map("comment_id")
  comment   Comment? @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
}

model Follow {
  id           String   @id @default(uuid())
  followerId   String   @map("follower_id")
  follower     User     @relation("follower", fields: [followerId], references: [id])
  followingId  String   @map("following_id")
  following    User     @relation("following", fields: [followingId], references: [id])
  createdAt    DateTime @default(now())
}