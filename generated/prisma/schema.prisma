// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  email     String    @unique
  fullName  String?
  avatarUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  followers Follow[]  @relation("follower")
  following Follow[]  @relation("following")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  status    String    @default("draft")
  category  String?
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  postId    Int
  post      Post      @relation(fields: [postId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  parentId  Int?
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentToComment")
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followingId Int
  following   User     @relation("following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
}
